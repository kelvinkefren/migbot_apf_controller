<launch>

  <param name="use_sim_time" value="true"/>  
  
  <node name="map_to_velodyne2_base_link" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 map robot"/>
  <node name="velodyne2_base_link_to_front_scanner" pkg="tf2_ros" type="static_transform_publisher" args="0.23565 -0.0005 0.06795 0 0 0 robot front_scanner"/>
  <node name="velodyne2_base_link_to_rear_scanner" pkg="tf2_ros" type="static_transform_publisher" args="-0.23832 0.00542 0.09888 3.141592 0 0 robot rear_scanner"/>

  <node name="pointcloud_to_laserscan1" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" output="screen">
    <remap from="cloud_in" to="velodyne_points"/>
    <remap from="scan" to="scan_velodyne1"/>
    <param name="min_height" value="-5"/>
    <param name="max_height" value="5"/>
    <param name="angle_min" value="-1.5708"/> <!-- -π/2 -->
    <param name="angle_max" value="1.5708"/>  <!-- π/2 -->
    <param name="angle_increment" value="0.00872665"/> <!-- π/360 -->
    <param name="scan_time" value="0.1"/>
    <param name="range_min" value="0.1"/>
    <param name="range_max" value="100.0"/>
    <param name="target_frame" value="base_link"/>
    <param name="concurrency_level" value="1"/>
    <param name="use_inf" value="true"/>
  </node>

  <node name="pointcloud_to_laserscan2" pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" output="screen">
    <remap from="cloud_in" to="velodyne_points2"/>
    <remap from="scan" to="scan_velodyne2"/>
    <param name="min_height" value="-2"/>
    <param name="max_height" value="2"/>
    <param name="angle_min" value="-1.5708"/> <!-- -π/2 -->
    <param name="angle_max" value="1.5708"/>  <!-- π/2 -->
    <param name="angle_increment" value="0.00872665"/> <!-- π/360 -->
    <param name="scan_time" value="0.1"/>
    <param name="range_min" value="0.1"/>
    <param name="range_max" value="100.0"/>
    <param name="target_frame" value="base_link"/>
    <param name="concurrency_level" value="1"/>
    <param name="use_inf" value="true"/>
  </node>

  <node name="nodelet_manager" pkg="nodelet" type="nodelet" args="manager" output="screen">
    <param name="num_worker_threads" value="20"/>
  </node>
  
  <node name="scans_merger" pkg="nodelet" type="nodelet" args="load obstacle_detector/ScansMerger nodelet_manager">
    <param name="active"            value="true"/>
    <param name="publish_scan"      value="true"/>
    <param name="publish_pcl"       value="false"/>
    <param name="ranges_num"        value="1000"/>
    <param name="min_scanner_range" value="0.05"/>
    <param name="max_scanner_range" value="100.0"/>
    <param name="min_x_range"       value="-40.0"/>
    <param name="max_x_range"       value="40.0"/>
    <param name="min_y_range"       value="-40.0"/>
    <param name="max_y_range"       value="40.0"/>
    <param name="fixed_frame_id"    value="map"/>
    <param name="target_frame_id"   value="base_link"/>
    <remap from="front_scan" to="/scan_velodyne2"/>
    <remap from="rear_scan" to="/scan_velodyne2"/>
    <remap from="scan" to="/merged_scan"/>
  </node>

  <node name="obstacle_extractor" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleExtractor nodelet_manager">
    <param name="active"               value="true"/>
    <param name="use_scan"             value="true"/>
    <param name="use_pcl"              value="false"/>
    <param name="use_split_and_merge"    value="true"/>
    <param name="circles_from_visibles"  value="true"/>
    <param name="discard_converted_segments" value="false"/>
    <param name="transform_coordinates"  value="true"/>
    <param name="min_group_points"     value="2"/>
    <param name="max_group_distance"   value="5"/>
    <param name="distance_proportion"  value="0.00628"/>
    <param name="max_split_distance"   value="5"/>
    <param name="max_merge_separation" value="5"/>
    <param name="max_merge_spread"     value="5"/>
    <param name="max_circle_radius"    value="15"/>
    <param name="radius_enlargement"   value="0.5"/>
    <param name="min_x_limit"          value="-40.0"/>
    <param name="max_x_limit"          value="40.0"/>
    <param name="min_y_limit"          value="-40.0"/>
    <param name="max_y_limit"          value="40.0"/>
    <param name="frame_id"             value="map"/>
    <remap from="scan" to="/merged_scan"/>
    <remap from="raw_obstacles" to="/raw_obstacles"/>
  </node>

  <node name="obstacle_tracker" pkg="nodelet" type="nodelet" args="load obstacle_detector/ObstacleTracker nodelet_manager">
    <param name="active"                  value="true"/>
    <param name="loop_rate"               value="100.0"/>
    <param name="tracking_duration"       value="0.5"/>
    <param name="min_correspondence_cost" value="0.3"/>
    <param name="std_correspondence_dev"  value="0.5"/>
    <param name="process_variance"        value="2"/>  
    <param name="process_rate_variance"   value="0.1"/>  
    <param name="measurement_variance"    value="1.0"/>  
    <param name="frame_id"                value="map"/>
    <remap from="tracked_obstacles" to="obstacles"/>
  </node>

    <!-- First, run gazebo_scenario.py from the migbot_apf_controller package -->
    <node
        name="gazebo_scenario"
        pkg="migbot_apf_controller"
        type="gazebo_scenario.py"
        output="screen"
        required="true" />

    <!-- Carrega os parâmetros do arquivo YAML -->
    <rosparam file="$(find dynamic_obstacle_avoidance)/config/parameters.yaml" command="load" />

    <!-- Lança o nó scenario_controller -->
    <node
        name="scenario_controller"
        pkg="dynamic_obstacle_avoidance"
        type="scenario_controller.py"
        output="screen" />

    <!-- Lança o nó apfm_obstacle_avoidance -->
    <node
        name="apfm_obstacle_avoidance"
        pkg="dynamic_obstacle_avoidance"
        type="apfm_obstacle_avoidance.py"
        output="screen" />

    
    <!-- Carrega os parâmetros do arquivo YAML -->
    <rosparam file="$(find migbot_apf_controller)/config/param.yaml" command="load" />

    <!-- Finally, run wrench_calculator.py from the migbot_apf_controller package -->
    <node
        name="wrench_calculator"
        pkg="migbot_apf_controller"
        type="wrench_calculator.py"
        output="screen"        
        required="true">
        <remap from="/apfm/wrench" to="/Wrench" />
    </node>
    


</launch>
